#!/bin/bash

# Message of the Day (MOTD) script for displaying system status
# Shows chezmoi-auto-update status and other system information

# Get the directory where this script is located (resolves symlinks)
SCRIPT_DIR="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)"

# Source common utilities
# shellcheck source-path=SCRIPTDIR
source "$SCRIPT_DIR/lib-common.sh"

show_motd() {
    # Get paths using common library - check both old and new app names
    local old_app_name="chezmoi-auto-update"
    local new_app_name="chezmoi-update-check"
    local chezmoi_update_log_file
    local chezmoi_update_status_file
    
    # Check if new app has status, otherwise fall back to old app
    if [[ -f "$(get_app_status_file "$new_app_name")" ]]; then
        chezmoi_update_log_file="$(get_app_log_file "$new_app_name")"
        chezmoi_update_status_file="$(get_app_status_file "$new_app_name")"
        local app_display_name="Chezmoi Update Check"
    else
        chezmoi_update_log_file="$(get_app_log_file "$old_app_name")"
        chezmoi_update_status_file="$(get_app_status_file "$old_app_name")"
        local app_display_name="Chezmoi Auto-Update"
    fi
    
    # Header
    echo ""
    echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
    echo "‚îÇ Welcome back! Here's your system status:           ‚îÇ"
    echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
    echo ""
    
    # System info - cross-platform
    if command -v sw_vers &> /dev/null; then
        # macOS
        echo "üñ•Ô∏è  System: $(sw_vers -productName) $(sw_vers -productVersion)"
    elif [[ -f /etc/os-release ]]; then
        # Linux
        # shellcheck source=/etc/os-release
        . /etc/os-release
        echo "üñ•Ô∏è  System: $NAME $VERSION_ID"
    else
        echo "üñ•Ô∏è  System: $(uname -s) $(uname -r)"
    fi
    echo "üìÖ Date: $(date '+%A, %B %d, %Y at %I:%M %p')"
    echo "‚ö° Uptime: $(uptime | awk '{print $3,$4}' | sed 's/,//')"
    echo ""
    
    # Chezmoi Update Status
    echo "üìÅ $app_display_name:"
    if [[ -f "$chezmoi_update_status_file" ]]; then
        # Parse the status file (new extended format or old format)
        local status_line
        local status_date
        local status_state
        local status_message
        local has_changes
        local change_count
        local summary
        
        status_line=$(cat "$chezmoi_update_status_file")
        
        # Check if this is the new extended format (6 fields) or old format (3 fields)
        local field_count
        field_count=$(echo "$status_line" | tr -cd '|' | wc -c)
        
        if [[ $field_count -eq 5 ]]; then
            # New extended format: timestamp|state|message|has_changes|change_count|summary
            status_date=$(echo "$status_line" | cut -d'|' -f1)
            status_state=$(echo "$status_line" | cut -d'|' -f2)
            status_message=$(echo "$status_line" | cut -d'|' -f3)
            has_changes=$(echo "$status_line" | cut -d'|' -f4)
            change_count=$(echo "$status_line" | cut -d'|' -f5)
            summary=$(echo "$status_line" | cut -d'|' -f6)
        else
            # Old format: timestamp|state|message
            status_date=$(echo "$status_line" | cut -d'|' -f1)
            status_state=$(echo "$status_line" | cut -d'|' -f2)
            status_message=$(echo "$status_line" | cut -d'|' -f3)
            has_changes="unknown"
            change_count="0"
            summary=""
        fi
        
        # Show when last checked and how long ago
        local time_ago
        time_ago=$(get_time_since "$status_date")
        echo "   Last checked: $time_ago"
        
        # Show status with appropriate emoji and message
        case "$status_state" in
            "SUCCESS")
                if [[ "$has_changes" == "true" ]]; then
                    echo "   Status: ‚úÖ Changes available"
                    if [[ -n "$summary" ]]; then
                        echo "   Summary: \"$summary\""
                        echo "   Action: Run 'chezmoi diff' to review, then 'chezmoi apply' to update"
                    else
                        echo "   Details: $change_count file(s) have changes"
                        local diff_path
                        diff_path="$(get_last_diff_path "$new_app_name" 2>/dev/null || get_last_diff_path "$old_app_name" 2>/dev/null || echo "~/.cache/chezmoi-update-check/last-diff.txt")"
                        echo "   Diff: See $diff_path"
                        echo "   Action: Run 'chezmoi apply' to update"
                    fi
                else
                    echo "   Status: ‚ú® Up to date - $status_message"
                fi
                ;;
            "RUNNING") echo "   Status: üîÑ Running - $status_message" ;;
            "UPDATING") echo "   Status: ‚¨áÔ∏è  Updating - $status_message" ;;
            "SKIPPED") echo "   Status: ‚è∏Ô∏è  Skipped - $status_message" ;;
            "ERROR") echo "   Status: ‚ùå Failed - $status_message" ;;
            *) echo "   Status: ‚ÑπÔ∏è  Unknown - $status_message" ;;
        esac
        
    elif [[ -f "$chezmoi_update_log_file" ]]; then
        # Fallback to legacy log parsing if no status file
        echo "   Status: ‚ö†Ô∏è  Using legacy status (consider running update check)"
        local last_run
        last_run=$(tail -5 "$chezmoi_update_log_file" | grep -E "\[(INFO|ERROR)\]" | tail -1)
        
        if [[ -n "$last_run" ]]; then
            local run_date
            run_date=$(echo "$last_run" | sed 's/.*\[\(INFO\|ERROR\)\] \([^:]*\): .*/\2/')
            echo "   Last run: $run_date"
            
            if echo "$last_run" | grep -q "completed successfully"; then
                echo "   Status: ‚úÖ Success"
            elif echo "$last_run" | grep -q "No changes to apply"; then
                echo "   Status: ‚ú® Up to date"
            elif echo "$last_run" | grep -q "skipping"; then
                echo "   Status: ‚è∏Ô∏è  Skipped"
            elif echo "$last_run" | grep -q "failed"; then
                echo "   Status: ‚ùå Failed"
            fi
        fi
    else
        echo "   Status: üÜï No update checks found"
        echo "   Action: Run 'chezmoi-update-check.sh' to start monitoring"
    fi
    
    # Quick actions
    echo ""
    echo "üîß Quick commands:"
    echo "   ‚Ä¢ chezmoi status              - Check current status"
    echo "   ‚Ä¢ chezmoi diff                - See what would change"
    echo "   ‚Ä¢ chezmoi apply               - Apply pending changes"
    echo "   ‚Ä¢ chezmoi-update-check.sh     - Manual update check"
    echo ""
}

# If this script is executed directly, show the MOTD
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    show_motd
fi
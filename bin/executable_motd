#!/bin/bash

# Message of the Day (MOTD) script for displaying system status
# Shows chezmoi-auto-update status and other system information

# Get the directory where this script is located (resolves symlinks)
SCRIPT_DIR="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)"

# Source common utilities
source "$SCRIPT_DIR/lib-common.sh"

show_motd() {
    # Get paths using common library
    local app_name="chezmoi-auto-update"
    local chezmoi_update_log_file="$(get_app_log_file "$app_name")"
    local chezmoi_update_status_file="$(get_app_status_file "$app_name")"
    
    # Header
    echo ""
    echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
    echo "‚îÇ Welcome back! Here's your system status:           ‚îÇ"
    echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
    echo ""
    
    # System info - cross-platform
    if command -v sw_vers &> /dev/null; then
        # macOS
        echo "üñ•Ô∏è  System: $(sw_vers -productName) $(sw_vers -productVersion)"
    elif [[ -f /etc/os-release ]]; then
        # Linux
        . /etc/os-release
        echo "üñ•Ô∏è  System: $NAME $VERSION_ID"
    else
        echo "üñ•Ô∏è  System: $(uname -s) $(uname -r)"
    fi
    echo "üìÖ Date: $(date '+%A, %B %d, %Y at %I:%M %p')"
    echo "‚ö° Uptime: $(uptime | awk '{print $3,$4}' | sed 's/,//')"
    echo ""
    
    # Chezmoi Auto-Update Status
    echo "üìÅ Chezmoi Auto-Update Status:"
    if [[ -f "$chezmoi_update_log_file" ]]; then
        # Get today's abbreviated weekday name (e.g., Mon)
        local today_day=$(date '+%a')
        # Get yesterday's abbreviated weekday name - cross-platform
        if date -v-1d '+%a' &> /dev/null 2>&1; then
            # macOS
            local yesterday_day=$(date -v-1d '+%a')
        else
            # Linux
            local yesterday_day=$(date -d 'yesterday' '+%a')
        fi
        
        # Get the last few relevant log entries
        local last_run=$(grep -E "${today_day}|${yesterday_day}" "$chezmoi_update_log_file" | tail -1)
        local last_success=$(grep "completed successfully" "$chezmoi_update_log_file" | tail -1)
        local last_error=$(grep -E "failed|error|Error" "$chezmoi_update_log_file" | tail -1)
        
        # Check for status file first (more reliable)
        if [[ -f "$chezmoi_update_status_file" ]]; then
            local status_line=$(cat "$chezmoi_update_status_file")
            local status_date=$(echo "$status_line" | cut -d'|' -f1)
            local status_state=$(echo "$status_line" | cut -d'|' -f2)
            local status_message=$(echo "$status_line" | cut -d'|' -f3)
            
            echo "   Last run: $status_date"
            case "$status_state" in
                "SUCCESS") echo "   Status: ‚úÖ Success - $status_message" ;;
                "RUNNING") echo "   Status: üîÑ Running - $status_message" ;;
                "UPDATING") echo "   Status: ‚¨áÔ∏è  Updating - $status_message" ;;
                "SKIPPED") echo "   Status: ‚è∏Ô∏è  Skipped - $status_message" ;;
                "ERROR") echo "   Status: ‚ùå Failed - $status_message" ;;
                *) echo "   Status: ‚ÑπÔ∏è  Unknown - $status_message" ;;
            esac
        elif [[ -n "$last_run" ]]; then
            # Fallback to log parsing
            local run_date=$(echo "$last_run" | cut -d':' -f1-3)
            echo "   Last run: $run_date"
            
            if echo "$last_run" | grep -q "completed successfully"; then
                echo "   Status: ‚úÖ Success"
            elif echo "$last_run" | grep -q "No changes to apply"; then
                echo "   Status: ‚ú® Up to date"
            elif echo "$last_run" | grep -q "skipping update"; then
                echo "   Status: ‚è∏Ô∏è  Skipped (safe conditions not met)"
            elif echo "$last_run" | grep -q "failed"; then
                echo "   Status: ‚ùå Failed"
            else
                echo "   Status: ‚ÑπÔ∏è  In progress or unknown"
            fi
        else
            echo "   Status: üÜï No recent runs found"
        fi
        
        # Show if there are any pending changes
        if command -v chezmoi &> /dev/null; then
            local changes=$(chezmoi status 2>/dev/null | wc -l)
            if [[ $changes -gt 0 ]]; then
                echo "   Pending: ‚ö†Ô∏è  $changes file(s) have changes"
            fi
        fi
    else
        echo "   Status: ‚ö†Ô∏è Log file not found"
    fi
    
    # Quick actions
    echo ""
    echo "üîß Quick commands:"
    echo "   ‚Ä¢ chezmoi status    - Check for changes"
    echo "   ‚Ä¢ chezmoi diff      - See what's different"
    echo "   ‚Ä¢ tail -f $chezmoi_update_log_file"
    echo "                      - Watch auto-update log"
    echo ""
}

# If this script is executed directly, show the MOTD
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    show_motd
fi